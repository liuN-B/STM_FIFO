C51 COMPILER V9.60.0.0   MULTI_TIMER                                                       10/14/2021 14:45:53 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MULTI_TIMER
OBJECT MODULE PLACED IN multi_timer.obj
COMPILER INVOKED BY: D:\Software\MDK\C51\BIN\C51.EXE MultiTimer\multi_timer.c WARNINGLEVEL(0) OPTIMIZE(8,SPEED) BROWSE I
                    -NCDIR(.\MultiButton;.\MultiTimer) DEBUG OBJECTEXTEND PRINT(.\multi_timer.lst) OBJECT(multi_timer.obj)

line level    source

   1          /*
   2           * Copyright (c) 2016 Zibin Zheng <znbin@qq.com>
   3           * All rights reserved
   4           */
   5          
   6          #include "multi_timer.h"
   7          
   8          //timer handle list head.
   9          static struct Timer* head_handle = NULL;
  10          
  11          //Timer ticks
  12          static uint32_t _timer_ticks = 0;
  13          
  14          /**
  15            * @brief  Initializes the timer struct handle.
  16            * @param  handle: the timer handle strcut.
  17            * @param  timeout_cb: timeout callback.
  18            * @param  repeat: repeat interval time.
  19            * @retval None
  20            */
  21          void timer_init(struct Timer* handle, void(*timeout_cb)(), uint32_t timeout, uint32_t repeat)
  22          {
  23   1          // memset(handle, sizeof(struct Timer), 0);
  24   1          handle->timeout_cb = timeout_cb;
  25   1          handle->timeout = _timer_ticks + timeout;
  26   1          handle->repeat = repeat;
  27   1      }
  28          
  29          /**
  30            * @brief  Start the timer work, add the handle into work list.
  31            * @param  btn: target handle strcut.
  32            * @retval 0: succeed. -1: already exist.
  33            */
  34          int timer_start(struct Timer* handle)
  35          {
  36   1          struct Timer* target = head_handle;
  37   1      
  38   1          while(target)
  39   1          {
  40   2              if(target == handle) return -1; //already exist.
  41   2      
  42   2              target = target->next;
  43   2          }
  44   1      
  45   1          handle->next = head_handle;
  46   1          head_handle = handle;
  47   1          return 0;
  48   1      }
  49          
  50          /**
  51            * @brief  Stop the timer work, remove the handle off work list.
  52            * @param  handle: target handle strcut.
  53            * @retval None
  54            */
C51 COMPILER V9.60.0.0   MULTI_TIMER                                                       10/14/2021 14:45:53 PAGE 2   

  55          void timer_stop(struct Timer* handle)
  56          {
  57   1          struct Timer** curr;
  58   1      
  59   1          for(curr = &head_handle; *curr; )
  60   1          {
  61   2              struct Timer* entry = *curr;
  62   2      
  63   2              if (entry == handle)
  64   2              {
  65   3                  *curr = entry->next;
  66   3      //                      free(entry);
  67   3              }
  68   2              else
  69   2                  curr = &entry->next;
  70   2          }
  71   1      }
  72          
  73          /**
  74            * @brief  main loop.
  75            * @param  None.
  76            * @retval None
  77            */
  78          void timer_loop()
  79          {
  80   1          struct Timer* target;
  81   1      
  82   1          for(target = head_handle; target; target = target->next)
  83   1          {
  84   2              if(_timer_ticks >= target->timeout)
  85   2              {
  86   3                  if(target->repeat == 0)
  87   3                  {
  88   4                      timer_stop(target);
  89   4                  }
  90   3                  else
  91   3                  {
  92   4                      target->timeout = _timer_ticks + target->repeat;
  93   4                  }
  94   3      
  95   3                  target->timeout_cb();
  96   3              }
  97   2          }
  98   1      }
  99          
 100          /**
 101            * @brief  background ticks, timer repeat invoking interval 1ms.
 102            * @param  None.
 103            * @retval None.
 104            */
 105          void timer_ticks()
 106          {
 107   1          _timer_ticks++;
 108   1      }
 109          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    405    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MULTI_TIMER                                                       10/14/2021 14:45:53 PAGE 3   

   DATA SIZE        =      5      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
